#pragma once

#include "../solver.hpp"
#include "../milp/mad_statement.hpp"
#include "../milp/mad_solution.hpp"
#include "lp_solver.hpp"
#include <map>
#include <vector>

/// **************************************************
/// Решать для задачи линейного программирования MAD минимизации риска
/// **************************************************
class MadMinLpSolver : public Solver<MadSolution>  {
private:
    /// Формулировка задачи
    MadStatement * m_statement;
    /// Решатель линейной задачи
    LpSolver * m_solver;
    /// Текущее решение
    MadSolution m_solution;

public:
    /// **************************************************
    /// Инициализация решателя
    /// @param statement формулировка задачи
    /// @param linearSolver линейный решатель
    /// **************************************************
    MadMinLpSolver(MadStatement * statement, LpSolver * linearSolver);

    /// **************************************************
    /// деструктор
    /// **************************************************
    virtual ~MadMinLpSolver();

    /// **************************************************
    /// Создать матрицу ограничений линейной задачи MAD
    /// @returns матрица ограничений
    /// **************************************************
    Eigen::MatrixXd CreateConstraintMatrix();

    /// **************************************************
    /// Создать вектор ограничений линейной задачи MAD
    /// @returns вектор ограничений
    /// **************************************************
    Eigen::VectorXd CreateConstraintVector();

    /// **************************************************
    /// Создать вектор целевой функции линейной задачи MAD
    /// @returns вектор целевой функции
    /// **************************************************
    Eigen::VectorXd CreateObjectiveVector();

    /// **************************************************
    /// Решить задачу
    /// @returns решение задачи
    /// **************************************************
    virtual MadSolution & Solve();

    /// **************************************************
    /// Прервать исполнение
    /// **************************************************
    virtual void Interrupt();

    /// **************************************************
    /// Получить текущую точку
    /// @returns текущая точка
    /// **************************************************
    virtual MadSolution & Current();
};