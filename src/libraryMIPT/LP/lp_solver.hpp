#pragma once

#include "../solver.hpp"
#include "simplex_method.hpp"
#include <map>
#include <vector>
#include "../solution_status.hpp"

/// **************************************************
/// Рещатель для линейной задачи
/// **************************************************
class LpSolver {
private:

    /// Начало расчета
    clock_t m_tStart;
    /// Окончание расчета
    clock_t m_tStop;
    /// Таблица маппинга статуса симплекс-метода на статус решения
    std::map<LinearStatus, SolutionStatus> m_statusMap;
    /// Остановлен ли метод
    bool m_stop;
    /// Решатель задачи ЛП - симплекс-метод
    SimplexMethod * m_simplexMethod;
    /// Оставшееся число итераций
    int m_iterations;
    /// Текущая симплекс таблица
    Eigen::MatrixXd m_simplexTable;
    /// Базисные столбцы
    std::vector<int> m_basisColumns;
    SolutionStatus m_status;

public:

    LpSolver(SimplexMethod * simplexMethod);

    ~LpSolver();

    /// **************************************************
    /// Решить задачу линейного программирования min (c^Tx) при Ax=b, x\geq 0
    /// @param objectiveVector вектор-столбец c целевой функции
    /// @param constraintMatrix матрица ограничений A
    /// @param constraintVector вектор ограничений b
    /// @param iterationLimit максимальное число итераций
    /// @remarks 
    ///         при решении задачи число итераций уменьшается. Общее число итераций, использованных методом считается как разница
    ///         если iterationLimit задан меньшим 0, то ограничение не работает
    /// **************************************************
    void Solve(Eigen::VectorXd & objectiveVector, Eigen::MatrixXd & constraintMatrix,  Eigen::VectorXd & constraintVector,
        int & iterationLimit);

    /// **************************************************
    /// Прервать решение задачи
    /// **************************************************
    void Interrupt();

    /// **************************************************
    /// Получить число итераций
    /// **************************************************
    int & GetIterations();

    /// **************************************************
    /// Получить текущую точку
    /// **************************************************
    Eigen::VectorXd GetPoint();

    /// **************************************************
    /// Получить текущее значение
    /// **************************************************
    double GetValue();

    /// **************************************************
    /// Получить текущий статус
    /// **************************************************
    SolutionStatus GetStatus();

    /// **************************************************
    /// Получить длительность исполнения
    /// **************************************************
    double GetDuration();
};