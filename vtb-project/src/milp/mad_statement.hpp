#pragma once

#include <Eigen/Dense>

/// *************************************
/// Формулировка задачи минимизации / максимизации
/// *************************************
struct MadStatement {
    /// *************************************
    /// Матрица доходности. Размерность n_asset x Time
    /// *************************************
    Eigen::MatrixXd timeRate;

    /// *************************************
    /// Средней вектор доходности. Размерность n_asset
    /// *************************************
    Eigen::VectorXd meanRate;

    /// *************************************
    /// Максимальный вес актива в портфеле. Размерность n_asset ( 0 < maxWeight <= 1)
    /// *************************************
    Eigen::VectorXd maxWeight;

    /// *************************************
    /// Минимальная доходность
    /// *************************************
    double minReturn;

    /// *************************************
    /// Максимальный риск
    /// *************************************
    double maxRisk;

    /// *************************************
    /// Число единиц в одном пакете. Размерность n_asset (> 0)
    /// *************************************
    Eigen::VectorXi lotSize;

    /// *************************************
    /// Цена закрытия. Размерность n_asset (> 0)
    /// *************************************
    Eigen::VectorXd close;

    /// *************************************
    /// Объем капитала (> 0)
    /// *************************************
    double capital;

    /// *************************************
    /// Мининмальный относительный объем портфеля (0 <= minSize <= maxSize)
    /// *************************************
    double minSize;

    /// *************************************
    /// Максимальный относительный объем портфеля (0 <= minSize <= maxSize)
    /// По умолчанию равен 1
    /// *************************************
    double maxSize = 1;

    /// *************************************
    /// Ограничение на целевую функцию задачи
    /// *************************************
    double objectiveUserLimit;

    /// *************************************
    /// Ограничение на число итераций
    /// *************************************
    int iterationLimit;

    /// *************************************
    /// Ограничение на число узлов
    /// *************************************
    int nodeLimit;

    /// *************************************
    /// Ограничение на время расчета
    /// *************************************
    double timeLimit;

    /// *************************************
    /// требуемая точность решения
    /// *************************************
    double accuracy = 0.01;
};